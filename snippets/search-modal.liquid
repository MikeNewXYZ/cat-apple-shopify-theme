<template x-teleport="body">
  <aside
    class="fixed inset-0 w-full h-screen z-50"
    style="display: none;"
    x-cloak
    x-data="searchModal"
  >
    {%- comment -%}
      ANCHOR: Overlay
    {%- endcomment -%}
    <div
      class="absolute inset-0 w-full h-full bg-neutral bg-opacity-20"
      @click="showSearchModal = false"
      x-ref="overlay"
    ></div>

    {%- comment -%}
      ANCHOR: Main Content
    {%- endcomment -%}
    <div class="relative container flex justify-center items-center h-full pointer-events-none">
      <div
        class="relative w-full md:w-3/4 lg:w-4/6 xl:w-1/2 h-[90%] bg-base-100 z-10 shadow-md rounded-sm border-2 border-primary flex flex-col gap-4 p-2 md:p-4 pointer-events-auto"
        x-ref="main"
      >
        {%- comment -%}
          ANCHOR: Close Button
        {%- endcomment -%}
        <button
          class="absolute -top-1.5 -right-1.5 btn btn-ghost btn-circle btn-sm opacity-50 hover:opacity-100"
          @click="showSearchModal = false"
        >
          {% render 'icon',
            type: 'x'
          %}
        </button>

        {%- comment -%}
          ANCHOR: Search Box
        {%- endcomment -%}
        <input
          class="input input-bordered input-primary input-md md:input-lg w-full"
          type="text"
          placeholder="Search Product"
          @input.debounce.750="(e) => searchProduct(e.target.value)"
        />

        {%- comment -%}
          ANCHOR: Loading
        {%- endcomment -%}
        <template x-if="loading">
          <h1 class="text-center font-light text-2xl md:text-3xl">
            Loading Products...
          </h1>
        </template>


        {%- comment -%}
          ANCHOR: No Results
        {%- endcomment -%}
        <template x-if="!loading && searchResults.length === 0">
          <div class="text-center font-light">
            <h1 class="text-2xl md:text-3xl">
              Sorry No Products Could Be Found
            </h1>
  
            <h3 class="text-xl md:text-2xl mt-2">
              try searching something else
            </h3>
          </div>
        </template>


        {%- comment -%}
          ANCHOR: Search Result Items
        {%- endcomment -%}
        <div
          class="flex flex-col gap-2 flex-1 overflow-y-auto"
          x-cloak
          x-show="!loading && searchResults.length > 0"
          x-ref="products"
        >
          <template x-for="product in searchResults">
            <a
              class="w-full flex-shrink-0 h-24 border-2 border-dashed border-primary p-2 flex gap-2"
              style="opacity: 0;"
              :href="product.url"
            >
              <img
                class="h-full aspect-square object-cover object-center border-2 border-primary"
                draggable="false"
                :src="product.featured_image.url"
              />

              <div class="flex-1 flex flex-col justify-center gap-1 overflow-hidden pb-1 text-left h-full">
                <h1
                  class="text-xl sm:text-2xl font-bold uppercase truncate w-full"
                  x-text="product.title"
                >
                </h1>

                <div
                  class="text-lg sm:text-xl font-semibold uppercase w-full truncate"
                >
                  <template x-for="tag in product.tags">
                    <div
                      class="badge badge-sm md:badge-md mr-2"
                      x-text="tag"  
                    >
                    </div>
                  </template>
                </div>
              </div>
            </a>
          </template>
        </div>
      </div>
    </div>
  </aside>
</template>

<script class="hidden">
  document.addEventListener("alpine:init", () => {
    Alpine.data("searchModal", () => ({
      searchResults: [],
      loading: false,
      init() {
        this.$watch("showSearchModal", (show) => {
          if (show) {
            this.showAnimation()
          } else {
            this.hideAnimation()
          }
        })
      },
      showAnimation() {
        const tl = anime.timeline({
          begin: () => {
            this.$el.style.display = "block"
          }
        })

        tl.add({
          targets: this.$refs.main,
          translateY: ["100%", "0%"],
          duration: 500,
          easing: "easeOutQuint"
        }).add({
          targets: this.$refs.overlay,
          opacity: [0, 1],
          duration: 500,
          easing: "easeOutQuint"
        }, "-=250")
      },
      hideAnimation() {
        const tl = anime.timeline({
          complete: () => {
            this.$el.style.display = "none"
          }
        })

        tl.add({
          targets: this.$refs.main,
          translateY: "100vh",
          duration: 750
        }).add({
          targets: this.$refs.overlay,
          opacity: 0,
          easing: "easeOutQuint",
          duration: 500
        }, "-=500")
      },
      productStaggerAnimation() {
        this.$nextTick(() => {
          anime({
            targets: this.$refs.products.children,
            opacity: [0, 1],
            translateY: [-10, 0],
            delay: anime.stagger(100)
          })
        })
      },
      async searchProduct(search) {
        if (!search) {
          this.searchResults = []
          return
        }

        this.loading = true

        const searchQuery = `?q=${search}&resources[type]=product&resources[options][unavailable_products]=hide`
        const response = await fetch(window.Shopify.routes.root + `search/suggest.json${searchQuery}`)
        const data = await response.json()

        this.loading = false

        this.productStaggerAnimation()

        this.searchResults = data.resources.results.products
      }
    }))
  })
</script>

