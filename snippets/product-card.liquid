<div
  class="card card-compact w-full bg-base-100 border-2 border-primary"
  x-data="productCard"
  x-ref="card"
>
  <figure
    class="h-60 border-b-2 border-primary bg-neutral relative overflow-hidden"
    x-data="{ hover: false }"
    @mouseEnter="hover = true"
    @mouseLeave="hover = false"
    :class="hover || 'p-2'"
  >
    <img
      class="w-full h-full object-center z-10"
      src="{{ product.featured_image | img_url: 'large' }}"
      draggable="false"
      :class="hover ? 'object-cover' : 'object-contain'"
    />

    <img
      class="w-full h-full object-cover object-center blur-md absolute inset-0 scale-110 opacity-90"
      src="{{ product.featured_image | img_url: 'small' }}"
      draggable="false"
    />
  </figure>

  <div class="card-body gap-0">
    <h2 class="card-title">
      {{ product.title }}
    </h2>

    <h3 class="text-2xl flex gap-2">
      <span class="font-bold">
        {{ product.price_min | money }}
      </span>

      {% if product.compare_at_price %}
        <span class="line-through text-error font-semibold">
          {{ product.compare_at_price | money }}
        </span>
      {% endif %}
    </h3>

    <div class="mt-auto">
      <div class="flex gap-2 flex-wrap mt-6">
        {% for collection in product.collections %}
          <a
            class="badge badge-primary badge-outline whitespace-nowrap hover:border-dashed"
            href="{{ collection.url }}"
          >
            {{ collection.title }}
          </a>
        {% endfor %}
      </div>

      <hr class="divider divider-primary my-1" />

      <div class="card-actions">
        <a
          class="btn btn-primary w-full"
          href="{{ product.url }}"
          @mouseEnter="handleMouseEnter"
          @mouseLeave="handleMouseLeave"
        >
          View Product
        </a>
      </div>
    </div>
  </div>
</div>

<script>
document.addEventListener("alpine:init", () => {
  Alpine.data("productCard", () => ({
    handleMouseEnter() {
      if (anime.get(this.$refs.card, "opacity") !== "1") return

      anime({
        targets: this.$refs.card,
        scale: 1.05,
        duration: 500,
        loop: true,
        direction: "alternate"
      })
    },
    handleMouseLeave() {
      if (anime.get(this.$refs.card, "opacity") !== "1") return

      anime.remove(this.$refs.card)

      anime({
        targets: this.$refs.card,
        scale: 1,
        duration: 500
      })
    }
  }))
})
</script>